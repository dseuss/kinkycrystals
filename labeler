#!/usr/bin/env python
# encoding: utf-8
"""
Usage:
    labeler new [--datadir=<dd>] [--fileglob=<fg>]
    labeler view [--datadir=<dd>] [--fileglob=<fg>]

Options:
    --datadir=<dd>   Where to look for the data files [default: /Volumes/TOSHIBA EXT/PCO]
    --fileglob=<fg>  Globbing pattern to use [default: *.b16]
"""


from __future__ import division, print_function

import sys
import warnings
from glob import glob
from os import listdir, path
from random import shuffle

import docopt

import numpy as np
from kcrecog.dataio import read_b16
from matplotlib import pyplot as pl

LABELDIR = 'tests/labels/'
MIN_SLEN = 100


def extract_sequence_labels(ddir):
    """Returns all unqiue sequence labels from the datadir. These are the
    parts of the file names in `ddir` that occur before the last '_'.

    :param str ddir: Path to datadir as string
    :returns: Set with sequence labels

    """
    return {'_'.join(fname.split('_')[:-1]) for fname in listdir(ddir)}


def imshow(img, ax=None, **kwargs):
    """Shows the image `img` passed as numpy array in a much prettier way

    :param np.ndarray img: Image to show passed as RGB or grayscale image
    :param ax: Axis to use for plot (default: current axis)

    """
    if ax is None:
        ax = pl.gca()

    ax.grid(False)
    ax.set_xticklabels([])
    ax.set_yticklabels([])

    ax.imshow(img, **kwargs)
    ax.axis((0, img.shape[1], img.shape[0], 0))


def mouse_click(event, pointlist, img):
    if pl.get_current_fig_manager().toolbar.mode != '':
        return

    ax = pl.gca()
    current_axis = ax.axis()

    # left mouse button
    if event.button == 1:
        pointlist.append((event.xdata, event.ydata))

    # right mouse button
    if event.button == 3:
        for i in reversed(range(len(pointlist))):
            if (abs(event.xdata - pointlist[i][0]) < 5) \
                    and (abs(event.ydata - pointlist[i][1]) < 5):
                pointlist.pop(i)

    ax.clear()
    imshow(img)
    ax.scatter([x for x, _ in pointlist], [y for _, y in pointlist],
               color='r', marker='+', s=40)
    ax.axis(current_axis)
    pl.draw()


def key_press(event):
    if event.key == 'ctrl+q':
        sys.exit(0)


def run_labeler(abs_fileglob):
    print("Globbing for " + abs_fileglob + "...", end='')
    fnames = glob(abs_fileglob)
    print("{} matches found.".format(len(fnames)))
    shuffle(fnames)

    while True:
        fig = pl.figure(0)
        pl.gray()
        pointlist = []
        fname = fnames.pop()
        print("Reading {}...".format(fname), end='')
        img = read_b16(fname)

        if np.max(img) == np.min(img):
            print("Invalid file.")
            continue

        imshow(img)
        fig.canvas.mpl_connect('button_press_event',
                               lambda event: mouse_click(event, pointlist, img))
        fig.canvas.mpl_connect('key_press_event', key_press)
        pl.show()

        newname = path.join(LABELDIR, path.splitext(path.split(fname)[1])[0] + '.txt')
        np.savetxt(newname, np.array(pointlist, dtype=float))
        print("Saved {} points".format(len(pointlist)))


def run_viewer():
    for fname in listdir(LABELDIR):
        datafile = path.join(DATADIR, path.splitext(path.split(fname)[1])[0] + '.b16')
        img = read_b16(datafile)
        with warnings.catch_warnings():
            warnings.filterwarnings("ignore", category=UserWarning, append=1)
            pointlist = np.loadtxt(path.join(LABELDIR, fname))

        print("Found {} ions in {}".format(len(pointlist), fname))

        ax = pl.gca()
        ax.clear()
        imshow(img)
        ax.scatter([x for x, _ in pointlist], [y for _, y in pointlist],
                color='r', marker='+', s=40)
        pl.show()

if __name__ == '__main__':
    args = docopt.docopt(__doc__)

    if args['new']:
        run_labeler(path.join(args['--datadir'], args['--fileglob']))
    elif args['view']:
        run_viewer()
